version: 2.1
orbs:
  infracost: infracost/infracost@0.8.4

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: beninanutshell/terraformer:1.0.3
  environment:
    TF_IN_AUTOMATION: true

jobs:
  init:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            echo $GPG_KEY | tr ',' '\n' > ./private_key.gpg
            gpg --import --batch ./private_key.gpg
            git-secret reveal -p $GPG_PASSWD
            for dir in env/*/
            do
              cd ${dir}
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFORM INIT ******************"
              echo "******* At environment: ${env} ********"
              echo "*************************************************"
              echo $GCP_CREDENTIALS	 > terraform-deploy.json
              export GOOGLE_APPLICATION_CREDENTIALS="terraform-deploy.json"
              terraform init -input=false
              cd ../../
             done
      - persist_to_workspace:
          root: ~/repo
          paths: .
  plan:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Terraform plan
          command: |
            for dir in env/*/
            do
              cd ${dir}
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFORM PLAN ******************"
              echo "******* At environment: ${env} ********"
              echo "*************************************************"
              echo $GCP_CREDENTIALS	 > ./terraform-deploy.json
              export GOOGLE_APPLICATION_CREDENTIALS="./terraform-deploy.json"
              terraform plan -out=tfplan.binary
              touch ~/repo/tfplan/tfplan.json
              terraform show -json tfplan.binary > ~/repo/tfplan/tfplan.json
              cd ../../
             done
      - store_artifacts:
          path: ~/repo/tfplan
          destination: tfplan
      - persist_to_workspace:
          root: ~/repo
          paths: .
  apply:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Terraform apply
          command: |
            for dir in env/*/
            do
              cd ${dir}
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFORM APPLY ******************"
              echo "******* At environment: ${env} ********"
              echo "**************************************************"
              echo $GCP_CREDENTIALS	 > terraform-deploy.json
              export GOOGLE_APPLICATION_CREDENTIALS="terraform-deploy.json"
              terraform apply -input=false -auto-approve tfplan
              cd ../../
             done
  destroy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Terraform destroy
          command: |
            for dir in env/*/
            do
              cd ${dir}
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFORM DESTROY ******************"
              echo "******* At environment: ${env} ********"
              echo "****************************************************"
              echo $GCP_CREDENTIALS	 > terraform-deploy.json
              export GOOGLE_APPLICATION_CREDENTIALS="terraform-deploy.json"
              terraform destroy -input=false -auto-approve
              cd ../../
             done

workflows:
  version: 2
  build_deploy:
    jobs:
      - init
      - plan:
          requires:
            - init
      - infracost/infracost:
          requires:
            - plan
          pre-steps:
            - attach_workspace:
                at: ~/repo/
          path: ~/repo/tfplan/tfplan.json
      - apply:
          requires:
            - plan
          filters:
            branches:
              only:
                - main
      - destroy:
          requires:
            - plan
          filters:
            branches:
              only:
                - destroy
